/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/updatePassword/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 비밀번호 인증 코드 검증 */
        put: operations["updatePassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/submissions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSubmission"];
        put: operations["modify"];
        post?: never;
        delete: operations["cancel"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/submissions/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proposals/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["reject"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proposals/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["accept"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["markAsRead"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/read-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["markAllAsRead"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messages/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["markAsRead_1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messages/conversation/{projectId}/{freelancerId}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["markConversationAsRead"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getItem"];
        put: operations["update"];
        post?: never;
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/me/portfolios/{portfolioId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_1"];
        post?: never;
        delete: operations["delete_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/me/careers/{careerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateCareer"];
        post?: never;
        delete: operations["deleteCareer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews/{reviewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateReview"];
        post?: never;
        delete: operations["deleteReview"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateProjectComplete"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원가입 */
        post: operations["join"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/updatePassword/sendCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sendResetPasswordCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** AccessToken 재발급 */
        post: operations["refreshAccessToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/findId/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 아이디 찾기 */
        post: operations["findId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/findId/sendCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["sendEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/submissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSubmissions"];
        put?: never;
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proposals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProposals"];
        put?: never;
        post: operations["create_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMessages"];
        put?: never;
        post: operations["send"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/matching/recommend/{projectId}/recalculate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["recalculateRecommendations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getItems"];
        put?: never;
        post: operations["create_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/me/techs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["addMyTech"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/me/portfolios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyPortfolios"];
        put?: never;
        post: operations["savePortfolio"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/me/careers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["addCareer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getReviewsByTarget"];
        put?: never;
        post: operations["createReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/upload/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["uploadFiles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/favorites/{projectId}/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["toggleFavorite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createCompleteProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 정보 */
        get: operations["me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateMe"];
        trace?: never;
    };
    "/api/v1/freelancers/me/techs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteMyTech"];
        options?: never;
        head?: never;
        patch: operations["updateMyTech"];
        trace?: never;
    };
    "/api/projects/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateProjectStatus"];
        trace?: never;
    };
    "/api/v1/techs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchAvailableTechs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/proposals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProposal"];
        put?: never;
        post?: never;
        delete: operations["cancel_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/unread-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUnreadCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMessage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messages/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getConversations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/messages/conversation/{projectId}/{freelancerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getConversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/matching/recommend/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRecommendations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/{freelancerId}/techs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFreelancersTechs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/{freelancerId}/portfolios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPortfolios"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/{freelancerId}/careers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCareers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/portfolios/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPortfolio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyFreelancer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/freelancers/careers/{careerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCareer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews/{freelancerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getReviewsByFreelancerId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews/average": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAverageRating"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllProjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProjectStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProjectFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProjectFile"];
        put?: never;
        post?: never;
        delete: operations["deleteFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/{fileId}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["viewFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/{fileId}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["downloadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProjectById"];
        put?: never;
        post?: never;
        delete: operations["deleteProject"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/manager/{managerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProjectsByManagerId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/favorites/{projectId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFavoriteStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/favorites/member/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMemberFavoriteProjectIds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 로그아웃 */
        delete: operations["logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["delete_2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UpdatePasswordReq: {
            username?: string;
            email?: string;
            newPassword?: string;
            newPasswordCheck?: string;
            verifyCode?: string;
        };
        RsDataVoid: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: unknown;
        };
        PortfolioItemDto: {
            title?: string;
            description?: string;
            url?: string;
            thumbnailUrl?: string;
        };
        ProjectSubmissionModifyReqBody: {
            coverLetter: string;
            /** Format: int32 */
            proposedRate: number;
            /** Format: int32 */
            estimatedDuration: number;
            portfolio?: components["schemas"]["PortfolioItemDto"][];
        };
        ProjectSubmissionStatusUpdateReqBody: {
            /** @enum {string} */
            status: "PENDING" | "ACCEPTED" | "REJECTED";
            message?: string;
        };
        ProposalRejectReqBody: {
            responseMessage?: string;
            rejectionReason: string;
        };
        ProposalAcceptReqBody: {
            responseMessage?: string;
        };
        RsDataMapStringInteger: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: {
                [key: string]: number;
            };
        };
        FreelancerUpdateRequestDto: {
            freelancerTitle: string;
            type: string;
            location: string;
            content: string;
            isOnSite: boolean;
            /** Format: int32 */
            minMonthlyRate: number;
            /** Format: int32 */
            maxMonthlyRate: number;
            deleteExistingImage: boolean;
        };
        PortfolioUpdateRequestDto: {
            title?: string;
            description?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** Format: int32 */
            contribution?: number;
            externalUrl?: string;
            deleteExistingImage?: boolean;
        };
        CareerRequestDto: {
            title?: string;
            company?: string;
            position?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            current?: boolean;
            description?: string;
        };
        /** @description 리뷰 작성/수정 요청 DTO */
        ReviewRequestDto: {
            /**
             * Format: int64
             * @description 리뷰 대상 사용자 ID (프리랜서)
             * @example 5
             */
            targetFreelancerId?: number;
            /**
             * Format: int64
             * @description 리뷰가 연결된 프로젝트 ID
             * @example 10
             */
            projectId?: number;
            /**
             * Format: int32
             * @description 평점 (1~5)
             * @example 5
             */
            rating?: number;
            /**
             * @description 리뷰 제목
             * @example 훌륭한 협업이었습니다!
             */
            title?: string;
            /**
             * @description 리뷰 내용
             * @example 소통이 빠르고 결과물의 완성도가 높았습니다.
             */
            content?: string;
        };
        ReviewResponseDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            projectId?: number;
            /** Format: int64 */
            authorId?: number;
            authorNickname?: string;
            /** Format: int64 */
            targetUserId?: number;
            /** Format: int32 */
            rating?: number;
            title?: string;
            content?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        ProjectRequest: {
            title?: string;
            description?: string;
            /** @enum {string} */
            projectField?: "PLANNING" | "DESIGN" | "DEVELOPMENT";
            /** @enum {string} */
            recruitmentType?: "PROJECT_CONTRACT" | "PERSONAL_CONTRACT";
            /** @enum {string} */
            budgetType?: "RANGE_1_100" | "RANGE_100_200" | "RANGE_200_300" | "RANGE_300_500" | "RANGE_500_1000" | "RANGE_1000_2000" | "RANGE_2000_3000" | "RANGE_3000_5000" | "RANGE_5000_OVER" | "OVER_1_EUK" | "NEGOTIABLE";
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** Format: int64 */
            managerId?: number;
            /** @enum {string} */
            partnerType?: "INDIVIDUAL_FREELANCER" | "INDIVIDUAL_OR_TEAM_FREELANCER" | "BUSINESS_TEAM_OR_COMPANY" | "ANY_TYPE" | "ETC";
            /** Format: int64 */
            budgetAmount?: number;
            /** @enum {string} */
            progressStatus?: "IDEA_STAGE" | "CONTENT_ORGANIZED" | "DETAILED_PLAN";
            /** @enum {string} */
            companyLocation?: "SEOUL" | "GYEONGGI" | "INCHEON" | "GANGWON" | "CHUNGNAM" | "DAEJEON" | "CHUNGBUK" | "SEJONG" | "BUSAN" | "ULSAN" | "DAEGU" | "GYEONGBUK" | "GYEONGNAM" | "JEONNAM" | "GWANGJU" | "JEONBUK" | "JEJU" | "OVERSEAS";
            partnerEtcDescription?: string;
            techNames?: string[];
            attachmentFileIds?: number[];
            filesToDelete?: number[];
        };
        MemberInfo: {
            /** Format: int64 */
            id?: number;
            username?: string;
            nickname?: string;
        };
        ProjectFileInfo: {
            /** Format: int64 */
            id?: number;
            originalName?: string;
            /** Format: int64 */
            fileSize?: number;
            fileType?: string;
            /** Format: date-time */
            uploadDate?: string;
        };
        ProjectResponse: {
            /** Format: int64 */
            id?: number;
            title?: string;
            description?: string;
            /** @enum {string} */
            projectField?: "PLANNING" | "DESIGN" | "DEVELOPMENT";
            /** @enum {string} */
            recruitmentType?: "PROJECT_CONTRACT" | "PERSONAL_CONTRACT";
            /** @enum {string} */
            budgetType?: "RANGE_1_100" | "RANGE_100_200" | "RANGE_200_300" | "RANGE_300_500" | "RANGE_500_1000" | "RANGE_1000_2000" | "RANGE_2000_3000" | "RANGE_3000_5000" | "RANGE_5000_OVER" | "OVER_1_EUK" | "NEGOTIABLE";
            /** Format: int64 */
            budgetAmount?: number;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** @enum {string} */
            partnerType?: "INDIVIDUAL_FREELANCER" | "INDIVIDUAL_OR_TEAM_FREELANCER" | "BUSINESS_TEAM_OR_COMPANY" | "ANY_TYPE" | "ETC";
            partnerEtcDescription?: string;
            /** @enum {string} */
            progressStatus?: "IDEA_STAGE" | "CONTENT_ORGANIZED" | "DETAILED_PLAN";
            /** @enum {string} */
            companyLocation?: "SEOUL" | "GYEONGGI" | "INCHEON" | "GANGWON" | "CHUNGNAM" | "DAEJEON" | "CHUNGBUK" | "SEJONG" | "BUSAN" | "ULSAN" | "DAEGU" | "GYEONGBUK" | "GYEONGNAM" | "JEONNAM" | "GWANGJU" | "JEONBUK" | "JEJU" | "OVERSEAS";
            /** @enum {string} */
            status?: "RECRUITING" | "CONTRACTING" | "IN_PROGRESS" | "COMPLETED" | "SUSPENDED" | "CANCELLED";
            /** Format: int32 */
            viewCount?: number;
            /** Format: int32 */
            applicantCount?: number;
            manager?: components["schemas"]["MemberInfo"];
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            techStacks?: components["schemas"]["TechInfo"][];
            projectFiles?: components["schemas"]["ProjectFileInfo"][];
        };
        RsDataProjectResponse: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["ProjectResponse"];
        };
        TechInfo: {
            techName?: string;
            /** @enum {string} */
            techCategory?: "FRONTEND" | "BACKEND" | "DATABASE";
        };
        MemberJoinReq: {
            username: string;
            email: string;
            nickname: string;
            password: string;
            passwordCheck: string;
            passwordMatch?: boolean;
        };
        MemberDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            username?: string;
            nickname?: string;
            email?: string;
            roles?: ("GENERAL" | "PM" | "FREELANCER")[];
        };
        RsDataMemberDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["MemberDto"];
        };
        MemberLoginReq: {
            username: string;
            password: string;
        };
        MemberLoginRes: {
            MemberDto?: components["schemas"]["MemberDto"];
            refreshToken?: string;
            accessToken?: string;
        };
        RsDataMemberLoginRes: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["MemberLoginRes"];
        };
        SendUpdatePasswordCodeReq: {
            username: string;
            email: string;
        };
        FindIdReq: {
            email?: string;
            verifyCode?: string;
        };
        FindIdRes: {
            username?: string;
        };
        RsDataFindIdRes: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["FindIdRes"];
        };
        ProjectSubmissionCreateReqBody: {
            /** Format: int64 */
            projectId: number;
            coverLetter: string;
            /** Format: int32 */
            proposedRate: number;
            /** Format: int32 */
            estimatedDuration: number;
            portfolio?: components["schemas"]["PortfolioItemDto"][];
        };
        ProjectSubmissionDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            projectId?: number;
            projectTitle?: string;
            /** Format: int64 */
            freelancerId?: number;
            freelancerName?: string;
            coverLetter?: string;
            /** Format: int32 */
            proposedRate?: number;
            /** Format: int32 */
            estimatedDuration?: number;
            portfolio?: components["schemas"]["PortfolioItemDto"][];
            /** @enum {string} */
            status?: "PENDING" | "ACCEPTED" | "REJECTED";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RsDataProjectSubmissionDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["ProjectSubmissionDto"];
        };
        ProposalCreateReqBody: {
            /** Format: int64 */
            projectId: number;
            /** Format: int64 */
            freelancerId: number;
            message: string;
        };
        ProposalDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            projectId?: number;
            projectTitle?: string;
            /** Format: int64 */
            pmId?: number;
            pmName?: string;
            /** Format: int64 */
            freelancerId?: number;
            freelancerName?: string;
            message?: string;
            /** @enum {string} */
            status?: "PENDING" | "ACCEPTED" | "REJECTED" | "CANCELLED";
            responseMessage?: string;
            rejectionReason?: string;
            /** Format: date-time */
            responseDate?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RsDataProposalDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["ProposalDto"];
        };
        MessageCreateReqBody: {
            /** Format: int64 */
            receiverId: number;
            /** @enum {string} */
            relatedType: "SUBMISSION" | "PROPOSAL" | "PROJECT";
            /** Format: int64 */
            relatedId: number;
            content: string;
        };
        MessageDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            projectId?: number;
            projectTitle?: string;
            /** Format: int64 */
            pmId?: number;
            pmName?: string;
            /** Format: int64 */
            freelancerId?: number;
            freelancerName?: string;
            /** Format: int64 */
            senderId?: number;
            senderName?: string;
            /** @enum {string} */
            relatedType?: "SUBMISSION" | "PROPOSAL" | "PROJECT";
            /** Format: int64 */
            relatedId?: number;
            content?: string;
            isRead?: boolean;
            /** Format: date-time */
            readAt?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        RsDataMessageDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["MessageDto"];
        };
        FreelancerSaveRequestDto: {
            freelancerTitle: string;
            type: string;
            location: string;
            content: string;
            isOnSite: boolean;
            /** Format: int32 */
            minMonthlyRate: number;
            /** Format: int32 */
            maxMonthlyRate: number;
        };
        FreelancerDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            nickname?: string;
            freelancerTitle?: string;
            type?: string;
            location?: string;
            content?: string;
            isOnSite?: boolean;
            /** Format: int32 */
            minMonthlyRate?: number;
            /** Format: int32 */
            maxMonthlyRate?: number;
        };
        RsDataFreelancerDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["FreelancerDto"];
        };
        FreelancerTechAddDto: {
            /** Format: int64 */
            techId?: number;
            techLevel?: string;
        };
        FreelancerTechDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            techId?: number;
            techCategory?: string;
            techName?: string;
            techLevel?: string;
        };
        RsDataFreelancerTechDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["FreelancerTechDto"];
        };
        PortfolioSaveRequestDto: {
            title?: string;
            description?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** Format: int32 */
            contribution?: number;
            externalUrl?: string;
        };
        PortfolioResponseDto: {
            /** Format: int64 */
            id?: number;
            title?: string;
            description?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** Format: int32 */
            contribution?: number;
            imageUrl?: string;
            externalUrl?: string;
        };
        RsDataPortfolioResponseDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["PortfolioResponseDto"];
        };
        CareerResponseDto: {
            freelancerName?: string;
            /** Format: int64 */
            id?: number;
            title?: string;
            company?: string;
            position?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            current?: boolean;
            description?: string;
        };
        RsDataCareerResponseDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["CareerResponseDto"];
        };
        ProjectFile: {
            /** Format: int64 */
            id?: number;
            originalName?: string;
            storedName?: string;
            filePath?: string;
            /** Format: int64 */
            fileSize?: number;
            fileType?: string;
            /** Format: date-time */
            uploadDate?: string;
            contentType?: string;
            /** @enum {string} */
            storageType?: "FILE_SYSTEM" | "DATABASE";
        };
        RsDataProjectFile: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["ProjectFile"];
        };
        RsDataListProjectFile: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["ProjectFile"][];
        };
        RsDataMapStringObject: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: {
                [key: string]: unknown;
            };
        };
        UpdateMemberReq: {
            email?: string;
            nickname?: string;
        };
        ProjectStatusChangeRequest: {
            /** @enum {string} */
            status?: "RECRUITING" | "CONTRACTING" | "IN_PROGRESS" | "COMPLETED" | "SUSPENDED" | "CANCELLED";
            /** Format: int64 */
            changedById?: number;
        };
        Member: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            username?: string;
            password?: string;
            nickname?: string;
            email?: string;
            roles?: ("GENERAL" | "PM" | "FREELANCER")[];
            refreshToken?: string;
            /** Format: date-time */
            refreshTokenExpiry?: string;
        };
        Project: {
            /** Format: int64 */
            id?: number;
            title?: string;
            description?: string;
            /** @enum {string} */
            projectField?: "PLANNING" | "DESIGN" | "DEVELOPMENT";
            /** @enum {string} */
            recruitmentType?: "PROJECT_CONTRACT" | "PERSONAL_CONTRACT";
            /** @enum {string} */
            partnerType?: "INDIVIDUAL_FREELANCER" | "INDIVIDUAL_OR_TEAM_FREELANCER" | "BUSINESS_TEAM_OR_COMPANY" | "ANY_TYPE" | "ETC";
            /** @enum {string} */
            budgetType?: "RANGE_1_100" | "RANGE_100_200" | "RANGE_200_300" | "RANGE_300_500" | "RANGE_500_1000" | "RANGE_1000_2000" | "RANGE_2000_3000" | "RANGE_3000_5000" | "RANGE_5000_OVER" | "OVER_1_EUK" | "NEGOTIABLE";
            /** Format: int64 */
            budgetAmount?: number;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** @enum {string} */
            progressStatus?: "IDEA_STAGE" | "CONTENT_ORGANIZED" | "DETAILED_PLAN";
            /** @enum {string} */
            companyLocation?: "SEOUL" | "GYEONGGI" | "INCHEON" | "GANGWON" | "CHUNGNAM" | "DAEJEON" | "CHUNGBUK" | "SEJONG" | "BUSAN" | "ULSAN" | "DAEGU" | "GYEONGBUK" | "GYEONGNAM" | "JEONNAM" | "GWANGJU" | "JEONBUK" | "JEJU" | "OVERSEAS";
            /** @enum {string} */
            status?: "RECRUITING" | "CONTRACTING" | "IN_PROGRESS" | "COMPLETED" | "SUSPENDED" | "CANCELLED";
            /** Format: int32 */
            viewCount?: number;
            /** Format: int32 */
            applicantCount?: number;
            manager?: components["schemas"]["Member"];
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            partnerEtcDescription?: string;
        };
        RsDataProject: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["Project"];
        };
        TechDto: {
            /** Format: int64 */
            id?: number;
            techCategory?: string;
            techName?: string;
        };
        RsDataListProjectSubmissionDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["ProjectSubmissionDto"][];
        };
        RsDataListProposalDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["ProposalDto"][];
        };
        NotificationDto: {
            /** Format: int64 */
            id?: number;
            /** @enum {string} */
            notificationType?: "PROPOSAL_RECEIVED" | "PROPOSAL_ACCEPTED" | "PROPOSAL_REJECTED" | "MESSAGE_RECEIVED" | "SUBMISSION_ACCEPTED" | "SUBMISSION_REJECTED";
            title?: string;
            content?: string;
            relatedType?: string;
            /** Format: int64 */
            relatedId?: number;
            isRead?: boolean;
            /** Format: date-time */
            createdAt?: string;
        };
        RsDataListNotificationDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["NotificationDto"][];
        };
        RsDataMapStringLong: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: {
                [key: string]: number;
            };
        };
        RsDataListMessageDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["MessageDto"][];
        };
        ConversationDto: {
            /** Format: int64 */
            projectId?: number;
            projectTitle?: string;
            /** Format: int64 */
            freelancerId?: number;
            freelancerName?: string;
            /** Format: int64 */
            pmId?: number;
            pmName?: string;
            lastMessage?: string;
            /** Format: date-time */
            lastMessageAt?: string;
            /** Format: int32 */
            unreadCount?: number;
            lastMessagePreview?: string;
        };
        RsDataListConversationDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["ConversationDto"][];
        };
        FreelancerRecommendationDto: {
            /** Format: int64 */
            freelancerId?: number;
            freelancerName?: string;
            /** Format: int32 */
            totalExperience?: number;
            /** Format: double */
            averageRating?: number;
            /** Format: int32 */
            minRate?: number;
            /** Format: int32 */
            maxRate?: number;
            available?: boolean;
            /** Format: double */
            matchingScore?: number;
            /** Format: double */
            skillScore?: number;
            /** Format: double */
            experienceScore?: number;
            /** Format: double */
            budgetScore?: number;
            /** Format: int32 */
            rank?: number;
            matchingReasons?: {
                [key: string]: unknown;
            };
            skills?: components["schemas"]["FreelancerTechDto"][];
            /** Format: int64 */
            completedProjects?: number;
        };
        RecommendationResponseDto: {
            /** Format: int64 */
            projectId?: number;
            projectTitle?: string;
            /** Format: int32 */
            totalRecommendations?: number;
            recommendations?: components["schemas"]["FreelancerRecommendationDto"][];
        };
        RsDataRecommendationResponseDto: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: components["schemas"]["RecommendationResponseDto"];
        };
        FreelancerListResponseDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            nickname?: string;
            freelancerTitle?: string;
            type?: string;
            location?: string;
            content?: string;
            isOnSite?: boolean;
            /** Format: int32 */
            minMonthlyRate?: number;
            /** Format: int32 */
            maxMonthlyRate?: number;
            /** Format: double */
            ratingAvg?: number;
            /** Format: int32 */
            reviewsCount?: number;
            /** Format: int32 */
            favoritesCount?: number;
            /** Format: int32 */
            completedProjectsCount?: number;
            techList?: components["schemas"]["FreelancerTechDto"][];
            freelancerProfileImageUrl?: string;
        };
        FreelancerDetailResponseDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            nickname?: string;
            freelancerTitle?: string;
            type?: string;
            location?: string;
            content?: string;
            isOnSite?: boolean;
            /** Format: int32 */
            minMonthlyRate?: number;
            /** Format: int32 */
            maxMonthlyRate?: number;
            /** Format: double */
            ratingAvg?: number;
            /** Format: int32 */
            reviewsCount?: number;
            /** Format: int32 */
            favoritesCount?: number;
            /** Format: int32 */
            completedProjectsCount?: number;
            techList?: components["schemas"]["FreelancerTechDto"][];
            careerList?: components["schemas"]["CareerResponseDto"][];
            freelancerProfileImageUrl?: string;
        };
        PageProjectResponse: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ProjectResponse"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            unpaged?: boolean;
        };
        SortObject: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        RsDataListLong: {
            resultCode?: string;
            /** Format: int32 */
            statusCode?: number;
            msg?: string;
            data?: number[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePasswordReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getSubmission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProjectSubmissionDto"];
                };
            };
        };
    };
    modify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectSubmissionModifyReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    cancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updateStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectSubmissionStatusUpdateReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    reject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProposalRejectReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    accept: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProposalAcceptReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    markAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    markAllAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMapStringInteger"];
                };
            };
        };
    };
    markAsRead_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    markConversationAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
                freelancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["FreelancerDetailResponseDto"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    dto: components["schemas"]["FreelancerUpdateRequestDto"];
                    /** Format: binary */
                    imageFile: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    update_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                portfolioId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    dto: components["schemas"]["PortfolioUpdateRequestDto"];
                    /** Format: binary */
                    imageFile: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    delete_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                portfolioId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updateCareer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                careerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CareerRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    deleteCareer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                careerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updateReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ReviewResponseDto"];
                };
            };
        };
    };
    deleteReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateProjectComplete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProjectResponse"];
                };
            };
        };
    };
    join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberJoinReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberDto"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberLoginReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberLoginRes"];
                };
            };
        };
    };
    sendResetPasswordCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendUpdatePasswordCodeReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    refreshAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberLoginRes"];
                };
            };
        };
    };
    findId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FindIdReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFindIdRes"];
                };
            };
        };
    };
    sendEmail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FindIdReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getSubmissions: {
        parameters: {
            query?: {
                projectId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListProjectSubmissionDto"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectSubmissionCreateReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProjectSubmissionDto"];
                };
            };
        };
    };
    getProposals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListProposalDto"];
                };
            };
        };
    };
    create_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProposalCreateReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProposalDto"];
                };
            };
        };
    };
    getMessages: {
        parameters: {
            query?: {
                relatedType?: "SUBMISSION" | "PROPOSAL" | "PROJECT";
                relatedId?: number;
                unreadOnly?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListMessageDto"];
                };
            };
        };
    };
    send: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MessageCreateReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMessageDto"];
                };
            };
        };
    };
    recalculateRecommendations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["FreelancerListResponseDto"][];
                };
            };
        };
    };
    create_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    dto: components["schemas"]["FreelancerSaveRequestDto"];
                    /** Format: binary */
                    imageFile: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFreelancerDto"];
                };
            };
        };
    };
    addMyTech: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FreelancerTechAddDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFreelancerTechDto"];
                };
            };
        };
    };
    getMyPortfolios: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PortfolioResponseDto"][];
                };
            };
        };
    };
    savePortfolio: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    dto: components["schemas"]["PortfolioSaveRequestDto"];
                    /** Format: binary */
                    imageFile: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPortfolioResponseDto"];
                };
            };
        };
    };
    addCareer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CareerRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCareerResponseDto"];
                };
            };
        };
    };
    getReviewsByTarget: {
        parameters: {
            query: {
                targetUserId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ReviewResponseDto"][];
                };
            };
        };
    };
    createReview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ReviewResponseDto"];
                };
            };
        };
    };
    uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProjectFile"];
                };
            };
        };
    };
    uploadFiles: {
        parameters: {
            query: {
                files: string[];
            };
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListProjectFile"];
                };
            };
        };
    };
    toggleFavorite: {
        parameters: {
            query: {
                memberId: number;
            };
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMapStringObject"];
                };
            };
        };
    };
    createCompleteProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProjectResponse"];
                };
            };
        };
    };
    me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberDto"];
                };
            };
        };
    };
    updateMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMemberReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberDto"];
                };
            };
        };
    };
    deleteMyTech: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updateMyTech: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updateProjectStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectStatusChangeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProject"];
                };
            };
        };
    };
    searchAvailableTechs: {
        parameters: {
            query: {
                keyword: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["TechDto"][];
                };
            };
        };
    };
    getProposal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataProposalDto"];
                };
            };
        };
    };
    cancel_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getNotifications: {
        parameters: {
            query?: {
                unreadOnly?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListNotificationDto"];
                };
            };
        };
    };
    getUnreadCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMapStringLong"];
                };
            };
        };
    };
    getMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMessageDto"];
                };
            };
        };
    };
    getConversations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListConversationDto"];
                };
            };
        };
    };
    getConversation: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                projectId: number;
                freelancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListMessageDto"];
                };
            };
        };
    };
    getRecommendations: {
        parameters: {
            query?: {
                limit?: number;
                minScore?: number;
            };
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataRecommendationResponseDto"];
                };
            };
        };
    };
    getFreelancersTechs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                freelancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["FreelancerTechDto"][];
                };
            };
        };
    };
    getPortfolios: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                freelancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PortfolioResponseDto"][];
                };
            };
        };
    };
    getCareers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                freelancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["CareerResponseDto"][];
                };
            };
        };
    };
    getPortfolio: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PortfolioResponseDto"];
                };
            };
        };
    };
    getMyFreelancer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["FreelancerDetailResponseDto"];
                };
            };
        };
    };
    getCareer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                careerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["CareerResponseDto"];
                };
            };
        };
    };
    getReviewsByFreelancerId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                freelancerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ReviewResponseDto"][];
                };
            };
        };
    };
    getAverageRating: {
        parameters: {
            query: {
                targetUserId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": number;
                };
            };
        };
    };
    getAllReviews: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ReviewResponseDto"][];
                };
            };
        };
    };
    getAllProjects: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                search?: string;
                status?: "RECRUITING" | "CONTRACTING" | "IN_PROGRESS" | "COMPLETED" | "SUSPENDED" | "CANCELLED";
                projectField?: "PLANNING" | "DESIGN" | "DEVELOPMENT";
                recruitmentType?: "PROJECT_CONTRACT" | "PERSONAL_CONTRACT";
                partnerType?: "INDIVIDUAL_FREELANCER" | "INDIVIDUAL_OR_TEAM_FREELANCER" | "BUSINESS_TEAM_OR_COMPANY" | "ANY_TYPE" | "ETC";
                budgetType?: "RANGE_1_100" | "RANGE_100_200" | "RANGE_200_300" | "RANGE_300_500" | "RANGE_500_1000" | "RANGE_1000_2000" | "RANGE_2000_3000" | "RANGE_3000_5000" | "RANGE_5000_OVER" | "OVER_1_EUK" | "NEGOTIABLE";
                minBudget?: number;
                maxBudget?: number;
                location?: string;
                techNames?: string[];
                sortBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageProjectResponse"];
                };
            };
        };
    };
    getProjectStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string;
                };
            };
        };
    };
    getProjectFiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListProjectFile"];
                };
            };
        };
    };
    getProjectFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ProjectFile"];
                };
            };
        };
    };
    deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    viewFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string;
                };
            };
        };
    };
    downloadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string;
                };
            };
        };
    };
    getProjectById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ProjectResponse"];
                };
            };
        };
    };
    deleteProject: {
        parameters: {
            query: {
                managerId: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getProjectsByManagerId: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                search?: string;
                status?: "RECRUITING" | "CONTRACTING" | "IN_PROGRESS" | "COMPLETED" | "SUSPENDED" | "CANCELLED";
                projectField?: "PLANNING" | "DESIGN" | "DEVELOPMENT";
                recruitmentType?: "PROJECT_CONTRACT" | "PERSONAL_CONTRACT";
                partnerType?: "INDIVIDUAL_FREELANCER" | "INDIVIDUAL_OR_TEAM_FREELANCER" | "BUSINESS_TEAM_OR_COMPANY" | "ANY_TYPE" | "ETC";
                budgetType?: "RANGE_1_100" | "RANGE_100_200" | "RANGE_200_300" | "RANGE_300_500" | "RANGE_500_1000" | "RANGE_1000_2000" | "RANGE_2000_3000" | "RANGE_3000_5000" | "RANGE_5000_OVER" | "OVER_1_EUK" | "NEGOTIABLE";
                minBudget?: number;
                maxBudget?: number;
                location?: string;
                techNames?: string[];
                sortBy?: string;
            };
            header?: never;
            path: {
                managerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageProjectResponse"];
                };
            };
        };
    };
    getFavoriteStatus: {
        parameters: {
            query: {
                memberId: number;
            };
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMapStringObject"];
                };
            };
        };
    };
    getMemberFavoriteProjectIds: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListLong"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    delete_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
}
